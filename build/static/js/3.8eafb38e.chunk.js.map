{"version":3,"sources":["Components/pages/MovieCastPage.js","Components/pages/MovieReviewPage.js","Components/pages/MovieDetailsPage.js"],"names":["MovieCastPage","movieId","useState","cast","setCast","setError","useEffect","apiService","fetchMovieCredits","then","data","catch","map","star","src","profile_path","alt","name","character","id","MovieReviewPage","reviews","setReviews","fetchMovieReviews","results","length","review","author","content","MovieDetailsPage","useParams","url","useRouteMatch","movie","setMovie","releasedate","Date","release_date","getFullYear","fetchMovieDetails","poster_path","title","vote_average","overview","genres","genre","to","path"],"mappings":"mJAiCeA,EA9BO,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACpB,EAAwBC,mBAAS,MAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0BF,mBAAS,MAAnC,mBAAcG,GAAd,WAUA,OAPAC,qBAAU,WACNC,IACCC,kBAAkBP,GAClBQ,MAAK,SAAAC,GAAI,OAAIN,EAAQM,EAAKP,SAC1BQ,MAAMN,KACR,CAACJ,IAGA,mCACKE,GACG,6BACKA,EAAKS,KAAI,SAACC,GAAD,OACN,+BACI,qBAAKC,IAAG,UAfhB,mCAegB,OAAeD,EAAKE,cAAgBC,IAAKH,EAAKI,OACtD,4BAAIJ,EAAKI,OACT,4CAAeJ,EAAKK,eAHfL,EAAKM,YCWvBC,EA5BS,SAAC,GAAe,IAAdnB,EAAa,EAAbA,QACtB,EAA8BC,mBAAS,IAAvC,mBAAOmB,EAAP,KAAgBC,EAAhB,KACA,EAA0BpB,mBAAS,MAAnC,mBAAcG,GAAd,WASA,OAPAC,qBAAU,WACNC,IACCgB,kBAAkBtB,GAClBQ,MAAK,SAAAC,GAAI,OAAIY,EAAWZ,EAAKc,YAC7Bb,MAAMN,KACR,CAACJ,IAGA,mCACKoB,EAAQI,OACL,6BACKJ,EAAQT,KAAI,SAACc,GAAD,OACT,+BACI,6BAAKA,EAAOC,SACZ,4BAAID,EAAOE,YAFNF,EAAOP,SAMtB,6ECkCHU,UApDU,WAAO,IAAD,EACpB5B,EAAW6B,cAAX7B,QACA8B,EAAOC,cAAPD,IACP,EAA0B7B,mBAAS,IAAnC,mBAAO+B,EAAP,KAAcC,EAAd,KACA,EAA0BhC,mBAAS,MAAnC,mBAAcG,GAAd,WAEM8B,EADO,IAAIC,KAAJ,UAAYH,EAAMI,eACNC,cAYzB,OARAhC,qBAAU,WACPC,IACCgC,kBAAkBtC,GAClBQ,KAAKyB,GACLvB,MAAMN,KAEP,CAACJ,IAGI,qCACI,gCACI,qBAAKa,IAAG,UAbR,mCAaQ,OAAemB,EAAMO,aAAexB,IAAKiB,EAAMQ,QACvD,gCACI,+BAAKR,EAAMQ,MAAX,IAAkB,qCAAQN,EAAR,UAClB,6CAAqC,GAApBF,EAAMS,aAAvB,OACA,4BAAIT,EAAMU,WACV,uCACKV,EAAMW,cADX,aACK,EAAchC,KAAI,SAAAiC,GAAK,OACpB,6BAAoBA,EAAM5B,MAAjB4B,EAAM1B,eAK/B,wDACA,+BACI,6BACI,cAAC,IAAD,CAAS2B,GAAE,UAAKf,EAAL,SAAX,mBADKE,EAAMd,IAGf,6BACI,cAAC,IAAD,CAAS2B,GAAE,UAAKf,EAAL,YAAX,sBADKE,EAAMd,OAInB,cAAC,IAAD,CAAO4B,KAAK,wBAAZ,SACQ,cAAC,EAAD,CAAe9C,QAASA,MAEhC,cAAC,IAAD,CAAO8C,KAAK,2BAAZ,SACO,cAAC,EAAD,CAAiB9C,QAASA","file":"static/js/3.8eafb38e.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport apiService from '../../services/movies-api';\n\nconst MovieCastPage = ({movieId}) => {\n    const [cast, setCast] = useState(null);\n    const [error, setError] = useState(null);\n    const IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\n    useEffect(() => {\n        apiService\n        .fetchMovieCredits(movieId)\n        .then(data => setCast(data.cast))\n        .catch(setError);\n    }, [movieId]);\n\n    return (\n        <>\n            {cast && \n                <ul>\n                    {cast.map((star) => \n                        <li key={star.id}>\n                            <img src={`${IMG_URL}${star.profile_path}`} alt={star.name} />\n                            <p>{star.name}</p>\n                            <p>Character: {star.character}</p>\n                        </li>\n                    )}\n                </ul>\n            }\n        \n        </>\n    );\n};\n\nexport default MovieCastPage;","import React, {useState, useEffect}from 'react';\nimport apiService from '../../services/movies-api';\n\nconst MovieReviewPage = ({movieId}) => {\n    const [reviews, setReviews] = useState([]);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        apiService\n        .fetchMovieReviews(movieId)\n        .then(data => setReviews(data.results))\n        .catch(setError);\n    }, [movieId])\n\n    return (\n        <>\n            {reviews.length ? \n                <ul>\n                    {reviews.map((review) => \n                        <li key={review.id}>\n                            <h3>{review.author}</h3>\n                            <p>{review.content}</p>\n                        </li>\n                    )}\n                </ul>\n                : <p>We don't have any reviews for this movie.</p>\n            }\n        </>\n    );\n};\n\nexport default MovieReviewPage;","import React, {useState, useEffect} from 'react';\nimport { Route, useParams } from 'react-router';\nimport { NavLink, useRouteMatch } from 'react-router-dom';\nimport apiService from '../../services/movies-api';\nimport MovieCastPage from './MovieCastPage';\nimport MovieReviewPage from './MovieReviewPage';\n\nconst MovieDetailsPage = () => {\n    const {movieId} = useParams();\n    const {url} = useRouteMatch();\n    const [movie, setMovie] = useState({});\n    const [error, setError] = useState(null);\n    const date = new Date(`${movie.release_date}`);\n    const releasedate = date.getFullYear();\n\n    const IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\n    useEffect(() => {\n       apiService\n       .fetchMovieDetails(movieId)\n       .then(setMovie)\n       .catch(setError);\n\n    }, [movieId]);\n\n    return (\n            <>\n                <div>\n                    <img src={`${IMG_URL}${movie.poster_path}`} alt={movie.title}></img>\n                    <div>\n                        <h1>{movie.title} <span>({releasedate})</span></h1>\n                        <p>User score: {(movie.vote_average)*10}%</p>\n                        <p>{movie.overview}</p>\n                        <ul>\n                            {movie.genres?.map(genre => \n                                <li key={genre.id}>{genre.name}</li>\n                                )}\n                        </ul>\n                    </div>\n                </div>\n                <h3>Additional information</h3>\n                <ul>\n                    <li key={movie.id}>\n                        <NavLink to={`${url}/cast`}>Cast</NavLink>\n                    </li>\n                    <li key={movie.id}>\n                        <NavLink to={`${url}/reviews`}>Reviews</NavLink>\n                    </li>\n                </ul>\n                <Route path=\"/movies/:movieId/cast\">\n                        <MovieCastPage movieId={movieId}/>\n                </Route>\n                <Route path=\"/movies/:movieId/reviews\">\n                       <MovieReviewPage movieId={movieId}/>\n                </Route>\n            </>\n    );\n};\n\nexport default MovieDetailsPage;"],"sourceRoot":""}